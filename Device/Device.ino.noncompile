// created by 04M04
// version: V1.0.1

/*--------------------------------------------------------------------------------------
  Includes
--------------------------------------------------------------------------------------*/

//dmd
//--------------------------------------------------------------------------------------
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

#define SERIAL_BAUD 115200

BLEServer *pServer = NULL;
BLECharacteristic *pCharacteristic = NULL;

BLECharacteristic *pCharacteristic_Points_Team1 = NULL;
BLECharacteristic *pCharacteristic_Points_Team2 = NULL;
BLECharacteristic *pCharacteristic_SummedPoints_Team1 = NULL;
BLECharacteristic *pCharacteristic_SummedPoints_Team2 = NULL;

#define SERVICE_UUID "acf4e731-64f4-4c13-b83d-9ea85d92a139"
#define CHARACTERISTIC_UUID "86a6d5ae-048b-41cf-929f-a54a0d900a02"

#define SERVICE_UUID_Game "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
#define CHARACTERISTIC_UUID_Points_Team1 "9b5a6f18-6c76-4f5e-aa5e-c5a5e6d1a42e"
#define CHARACTERISTIC_UUID_Points_Team2 "3f2370b7-6e79-4b16-b9e9-0fcd4b4c6b59"
#define CHARACTERISTIC_UUID_SummedPoints_Team1 "65a6c077-e5f2-4975-9c17-e5f442227c2a"
#define CHARACTERISTIC_UUID_SummedPoints_Team2 "1f30b69a-b3f8-4be3-9cfe-9f9b55d33b19"

bool deviceConnected = false;
bool oldDeviceConnected = false;
uint32_t value = 0;

#include <DMD32.h>
#include "fonts/myFont_16x16.h"
#include "fonts/myFont_16x32.h"

//Fire up the DMD library as dmd
#define DISPLAYS_ACROSS 2
#define DISPLAYS_DOWN 3
DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN);

//Timer setup
//create a hardware timer  of ESP32
hw_timer_t * timer = NULL;

//buttons
//--------------------------------------------------------------------------------------
int BTN_RESET_TEAM1_POINTS_PIN = 5;
int BTN_ADD_TEAM1_POINTS_PIN = 17;
int BTN_SUB_TEAM1_POINTS_PIN = 16;
int BTN_RESET_TEAM2_POINTS_PIN = 11;
int BTN_ADD_TEAM2_POINTS_PIN = 10;
int BTN_SUB_TEAM2_POINTS_PIN = 9;
int BTN_RESET_TEAM1_PLAYS_PIN = 13;
int BTN_ADD_TEAM1_PLAYS_PIN = 12;
int BTN_SUB_TEAM1_PLAYS_PIN = 14;
int BTN_RESET_TEAM2_PLAYS_PIN = 27;
int BTN_ADD_TEAM2_PLAYS_PIN = 26;
int BTN_SUB_TEAM2_PLAYS_PIN = 25;

//variables to keep track of the timing of recent interrupts
unsigned long button_time = 0;
unsigned long last_button_time = 0;
#define debounceDelay 250  // the debounce time; increase if the output flickers

int last_btnPressedState = 0;


//points
//--------------------------------------------------------------------------------------
int team1_points = 0;
int team2_points = 0;
int team1_summedPoints = 0;
int team2_summedPoints = 0;

/*--------------------------------------------------------------------------------------
  Interrupt handler for Timer1 (TimerOne) driven DMD refresh scanning, this gets
  called at the period set in Timer1.initialize();
--------------------------------------------------------------------------------------*/
void IRAM_ATTR triggerScan()
{
  dmd.scanDisplayBySPI();
}

void drawCount(int team1_points, int team2_points, int team1_summedPoints, int team2_summedPoints)
{
  char buffer[100];

  dmd.selectFont(myFont_16x32);

  sprintf(buffer, "%02d", team1_points);
  dmd.drawChar( 0, 0, buffer[0], GRAPHICS_NORMAL );
  dmd.drawChar(16, 0, buffer[1], GRAPHICS_NORMAL );
  sprintf(buffer, "%02d", team2_points);
  dmd.drawChar(32, 0, buffer[0], GRAPHICS_NORMAL );
  dmd.drawChar(48, 0, buffer[1], GRAPHICS_NORMAL );

  dmd.selectFont(myFont_16x16);
  
  sprintf(buffer, "%02d", team1_summedPoints);
  dmd.drawChar( 0, 32, buffer[0], GRAPHICS_NORMAL );
  dmd.drawChar(16, 32, buffer[1], GRAPHICS_NORMAL );
  sprintf(buffer, "%02d", team2_summedPoints);
  dmd.drawChar(32, 32, buffer[0], GRAPHICS_NORMAL );
  dmd.drawChar(48, 32, buffer[1], GRAPHICS_NORMAL );
}

void IRAM_ATTR trigger_BTN_RESET_TEAM1_POINTS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_RESET_TEAM1_POINTS_PIN;
    last_button_time = button_time;
  }
}
void IRAM_ATTR trigger_BTN_ADD_TEAM1_POINTS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_ADD_TEAM1_POINTS_PIN;
    last_button_time = button_time;
  }
}
void IRAM_ATTR trigger_BTN_SUB_TEAM1_POINTS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_SUB_TEAM1_POINTS_PIN;
    last_button_time = button_time;
  }
}
void IRAM_ATTR trigger_BTN_RESET_TEAM2_POINTS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_RESET_TEAM2_POINTS_PIN;
    last_button_time = button_time;
  }
}
void IRAM_ATTR trigger_BTN_ADD_TEAM2_POINTS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_ADD_TEAM2_POINTS_PIN;
    last_button_time = button_time;
  }
}
void IRAM_ATTR trigger_BTN_SUB_TEAM2_POINTS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_SUB_TEAM2_POINTS_PIN;
    last_button_time = button_time;
  }
}
void IRAM_ATTR trigger_BTN_RESET_TEAM1_PLAYS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_RESET_TEAM1_PLAYS_PIN;
    last_button_time = button_time;
  }
}
void IRAM_ATTR trigger_BTN_ADD_TEAM1_PLAYS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_ADD_TEAM1_PLAYS_PIN;
    last_button_time = button_time;
  }
}
void IRAM_ATTR trigger_BTN_SUB_TEAM1_PLAYS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_SUB_TEAM1_PLAYS_PIN;
    last_button_time = button_time;
  }
}
void IRAM_ATTR trigger_BTN_RESET_TEAM2_PLAYS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_RESET_TEAM2_PLAYS_PIN;
    last_button_time = button_time;
  }
}
void IRAM_ATTR trigger_BTN_ADD_TEAM2_PLAYS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_ADD_TEAM2_PLAYS_PIN;
    last_button_time = button_time;
  }
}
void IRAM_ATTR trigger_BTN_SUB_TEAM2_PLAYS_PIN(){
  button_time = millis();
  if (button_time - last_button_time > debounceDelay)
  {
    last_btnPressedState = BTN_SUB_TEAM2_PLAYS_PIN;
    last_button_time = button_time;
  }
}


void dmd_setup()
{
  // return the clock speed of the CPU
  uint8_t cpuClock = ESP.getCpuFreqMHz();
  
  // Use 1st timer of 4 
  // devide cpu clock speed on its speed value by MHz to get 1us for each signal  of the timer
  timer = timerBegin(0, cpuClock, true);
  // Attach triggerScan function to our timer 
  timerAttachInterrupt(timer, &triggerScan, true);
  // Set alarm to call triggerScan function  
  // Repeat the alarm (third parameter) 
  timerAlarmWrite(timer, 300, true);

  // Start an alarm 
  timerAlarmEnable(timer);

   //clear/init the DMD pixels held in RAM
  dmd.clearScreen( true );   //true is normal (all pixels off), false is negative (all pixels on)
}

void btn_setup()
{
  pinMode(BTN_RESET_TEAM1_POINTS_PIN, INPUT_PULLUP);
  pinMode(BTN_ADD_TEAM1_POINTS_PIN, INPUT_PULLUP);
  pinMode(BTN_SUB_TEAM1_POINTS_PIN, INPUT_PULLUP);
  pinMode(BTN_RESET_TEAM2_POINTS_PIN, INPUT_PULLUP);
  pinMode(BTN_ADD_TEAM2_POINTS_PIN, INPUT_PULLUP);
  pinMode(BTN_SUB_TEAM2_POINTS_PIN, INPUT_PULLUP);
  pinMode(BTN_RESET_TEAM1_PLAYS_PIN, INPUT_PULLUP);
  pinMode(BTN_ADD_TEAM1_PLAYS_PIN, INPUT_PULLUP);
  pinMode(BTN_SUB_TEAM1_PLAYS_PIN, INPUT_PULLUP);
  pinMode(BTN_RESET_TEAM2_PLAYS_PIN, INPUT_PULLUP);
  pinMode(BTN_ADD_TEAM2_PLAYS_PIN, INPUT_PULLUP);
  pinMode(BTN_SUB_TEAM2_PLAYS_PIN, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(BTN_RESET_TEAM1_POINTS_PIN), trigger_BTN_RESET_TEAM1_POINTS_PIN, FALLING);
  attachInterrupt(digitalPinToInterrupt(BTN_ADD_TEAM1_POINTS_PIN), trigger_BTN_ADD_TEAM1_POINTS_PIN, FALLING);
  attachInterrupt(digitalPinToInterrupt(BTN_SUB_TEAM1_POINTS_PIN), trigger_BTN_SUB_TEAM1_POINTS_PIN, FALLING);
  attachInterrupt(digitalPinToInterrupt(BTN_RESET_TEAM2_POINTS_PIN), trigger_BTN_RESET_TEAM2_POINTS_PIN, FALLING);
  attachInterrupt(digitalPinToInterrupt(BTN_ADD_TEAM2_POINTS_PIN), trigger_BTN_ADD_TEAM2_POINTS_PIN, FALLING);
  attachInterrupt(digitalPinToInterrupt(BTN_SUB_TEAM2_POINTS_PIN), trigger_BTN_SUB_TEAM2_POINTS_PIN, FALLING);
  attachInterrupt(digitalPinToInterrupt(BTN_RESET_TEAM1_PLAYS_PIN), trigger_BTN_RESET_TEAM1_PLAYS_PIN, FALLING);
  attachInterrupt(digitalPinToInterrupt(BTN_ADD_TEAM1_PLAYS_PIN), trigger_BTN_ADD_TEAM1_PLAYS_PIN, FALLING);
  attachInterrupt(digitalPinToInterrupt(BTN_SUB_TEAM1_PLAYS_PIN), trigger_BTN_SUB_TEAM1_PLAYS_PIN, FALLING);
  attachInterrupt(digitalPinToInterrupt(BTN_RESET_TEAM2_PLAYS_PIN), trigger_BTN_RESET_TEAM2_PLAYS_PIN, FALLING);
  attachInterrupt(digitalPinToInterrupt(BTN_ADD_TEAM2_PLAYS_PIN), trigger_BTN_ADD_TEAM2_PLAYS_PIN, FALLING);
  attachInterrupt(digitalPinToInterrupt(BTN_SUB_TEAM2_PLAYS_PIN), trigger_BTN_SUB_TEAM2_PLAYS_PIN, FALLING);
}


class MyServerCallbacks : public BLEServerCallbacks
{
  void onConnect(BLEServer *pServer)
  {
    deviceConnected = true;
    BLEDevice::startAdvertising();
  };
  void onDisconnect(BLEServer *pServer)
  {
    deviceConnected = false;
  }
};

// class MyCharacteristicCallbacks : public BLECharacteristicCallbacks
// {
//   void onWrite(BLECharacteristic *pCharacteristic)
//   {
//     std::string value = pCharacteristic->getValue();
//     if (value.length() > 0)
//     {
//       Serial.println("*********");
//       Serial.print("New value: ");
//       for (int i = 0; i < value.length(); i++)
//         {
//           Serial.print(value[i]);
//         }
//       Serial.println();
//       Serial.println("*********");
//     }
//   }
// };

class MyPointCharacteristicCallbacks : public BLECharacteristicCallbacks
{
  void onWrite(BLECharacteristic *pCharacteristic)
  {
    uint8_t data = pCharacteristic->getValue()[0];
    String id = pCharacteristic->getUUID().toString().c_str();
    if(id == CHARACTERISTIC_UUID_Points_Team1){
      team1_points = data;
    }
    if(id == CHARACTERISTIC_UUID_Points_Team2){
      team2_points = data;
    }
    if(id == CHARACTERISTIC_UUID_SummedPoints_Team1){
      team1_summedPoints = data;
    }
    if(id == CHARACTERISTIC_UUID_SummedPoints_Team2){
      team2_summedPoints = data;
    }
    Serial.println("*********");
    Serial.print("from UUID: ");
    Serial.println(id);
    Serial.print("New value: ");
    Serial.print(data);
    Serial.println();
    Serial.println("team1_points:");
    Serial.println(team1_points);
    Serial.println("team2_points:");
    Serial.println(team2_points);
    Serial.println("team1_summedPoints:");
    Serial.println(team1_summedPoints);
    Serial.println("team2_summedPoints:");
    Serial.println(team2_summedPoints);
    Serial.println("*********");
    // Do something with the uint8_t data
  }
};

// void ble_setup()
// {
//   // Create the BLE Device
//   BLEDevice::init("MatDis BLE");

//   // Create the BLE Server
//   pServer = BLEDevice::createServer();
//   pServer->setCallbacks(new MyServerCallbacks());

//   // Create the BLE Service
//   // BLEService *pService = pServer->createService(SERVICE_UUID);
//   BLEService *pServiceGame = pServer->createService(SERVICE_UUID_Game);

//   // Create a BLE Characteristic
//   // pCharacteristic = pService->createCharacteristic(
//   //     CHARACTERISTIC_UUID,
//   //     BLECharacteristic::PROPERTY_READ |
//   //         BLECharacteristic::PROPERTY_WRITE |
//   //         BLECharacteristic::PROPERTY_NOTIFY |
//   //         BLECharacteristic::PROPERTY_INDICATE);
//   pCharacteristic_Points_Team1 = pServiceGame->createCharacteristic(
//       CHARACTERISTIC_UUID_Points_Team1,
//       BLECharacteristic::PROPERTY_READ |
//           BLECharacteristic::PROPERTY_WRITE |
//           BLECharacteristic::PROPERTY_NOTIFY |
//           BLECharacteristic::PROPERTY_INDICATE);
//   pCharacteristic_Points_Team2 = pServiceGame->createCharacteristic(
//       CHARACTERISTIC_UUID_Points_Team2,
//       BLECharacteristic::PROPERTY_READ |
//           BLECharacteristic::PROPERTY_WRITE |
//           BLECharacteristic::PROPERTY_NOTIFY |
//           BLECharacteristic::PROPERTY_INDICATE);
//   pCharacteristic_SummedPoints_Team1 = pServiceGame->createCharacteristic(
//       CHARACTERISTIC_UUID_SummedPoints_Team1,
//       BLECharacteristic::PROPERTY_READ |
//           BLECharacteristic::PROPERTY_WRITE |
//           BLECharacteristic::PROPERTY_NOTIFY |
//           BLECharacteristic::PROPERTY_INDICATE);
//   pCharacteristic_SummedPoints_Team2 = pServiceGame->createCharacteristic(
//       CHARACTERISTIC_UUID_SummedPoints_Team2,
//       BLECharacteristic::PROPERTY_READ |
//           BLECharacteristic::PROPERTY_WRITE |
//           BLECharacteristic::PROPERTY_NOTIFY |
//           BLECharacteristic::PROPERTY_INDICATE);

//   // pCharacteristic_Points_Team1->setValue("0");
//   // pCharacteristic_Points_Team2->setValue("0");
//   // pCharacteristic_SummedPoints_Team1->setValue("0");
//   // pCharacteristic_SummedPoints_Team2->setValue("0");

//   // https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml
//   // Create a BLE Descriptor
//   // pCharacteristic->addDescriptor(new BLE2902());

//   // pCharacteristic->setCallbacks(new MyCharacteristicCallbacks());


//   pCharacteristic_Points_Team1->addDescriptor(new BLE2902());
//   pCharacteristic_Points_Team2->addDescriptor(new BLE2902());
//   pCharacteristic_SummedPoints_Team1->addDescriptor(new BLE2902());
//   pCharacteristic_SummedPoints_Team2->addDescriptor(new BLE2902());

//   pCharacteristic_Points_Team1->setCallbacks(new MyPointCharacteristicCallbacks());
//   pCharacteristic_Points_Team2->setCallbacks(new MyPointCharacteristicCallbacks());
//   pCharacteristic_SummedPoints_Team1->setCallbacks(new MyPointCharacteristicCallbacks());
//   pCharacteristic_SummedPoints_Team2->setCallbacks(new MyPointCharacteristicCallbacks());

//   pCharacteristic_Points_Team1->setValue((uint8_t *)&team1_points, 1);
//   pCharacteristic_Points_Team2->setValue((uint8_t *)&team2_points, 1);
//   pCharacteristic_SummedPoints_Team1->setValue((uint8_t *)&team1_summedPoints, 1);
//   pCharacteristic_SummedPoints_Team2->setValue((uint8_t *)&team2_summedPoints, 1);

//   // Start the service
//   // pService->start();
//   pServiceGame->start();

//   // Start advertising
//   BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
//   pAdvertising->addServiceUUID(SERVICE_UUID);
//   pAdvertising->addServiceUUID(SERVICE_UUID_Game);
//   pAdvertising->setScanResponse(false);
//   pAdvertising->setMinPreferred(0x0); // set value to 0x00 to not advertise this parameter
//   BLEDevice::startAdvertising();

//   Serial.println("Waiting a client connection to notify...");
// }

/*--------------------------------------------------------------------------------------
  setup
  Called by the Arduino architecture before the main loop begins
--------------------------------------------------------------------------------------*/
void setup(void)
{
  Serial.begin(115200);
  dmd_setup();
  btn_setup();
  // ble_setup();
  
  // Create the BLE Device
  BLEDevice::init("MatDis BLE");

  // Create the BLE Server
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create the BLE Service
  // BLEService *pService = pServer->createService(SERVICE_UUID);
  BLEService *pServiceGame = pServer->createService(SERVICE_UUID_Game);

  // Create a BLE Characteristic
  // pCharacteristic = pService->createCharacteristic(
  //     CHARACTERISTIC_UUID,
  //     BLECharacteristic::PROPERTY_READ |
  //         BLECharacteristic::PROPERTY_WRITE |
  //         BLECharacteristic::PROPERTY_NOTIFY |
  //         BLECharacteristic::PROPERTY_INDICATE);
  pCharacteristic_Points_Team1 = pServiceGame->createCharacteristic(
      CHARACTERISTIC_UUID_Points_Team1,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY |
          BLECharacteristic::PROPERTY_INDICATE);
  pCharacteristic_Points_Team2 = pServiceGame->createCharacteristic(
      CHARACTERISTIC_UUID_Points_Team2,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY |
          BLECharacteristic::PROPERTY_INDICATE);
  pCharacteristic_SummedPoints_Team1 = pServiceGame->createCharacteristic(
      CHARACTERISTIC_UUID_SummedPoints_Team1,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY |
          BLECharacteristic::PROPERTY_INDICATE);
  pCharacteristic_SummedPoints_Team2 = pServiceGame->createCharacteristic(
      CHARACTERISTIC_UUID_SummedPoints_Team2,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY |
          BLECharacteristic::PROPERTY_INDICATE);

  // pCharacteristic_Points_Team1->setValue("0");
  // pCharacteristic_Points_Team2->setValue("0");
  // pCharacteristic_SummedPoints_Team1->setValue("0");
  // pCharacteristic_SummedPoints_Team2->setValue("0");

  // https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml
  // Create a BLE Descriptor
  // pCharacteristic->addDescriptor(new BLE2902());

  // pCharacteristic->setCallbacks(new MyCharacteristicCallbacks());


  pCharacteristic_Points_Team1->addDescriptor(new BLE2902());
  pCharacteristic_Points_Team2->addDescriptor(new BLE2902());
  pCharacteristic_SummedPoints_Team1->addDescriptor(new BLE2902());
  pCharacteristic_SummedPoints_Team2->addDescriptor(new BLE2902());

  pCharacteristic_Points_Team1->setCallbacks(new MyPointCharacteristicCallbacks());
  pCharacteristic_Points_Team2->setCallbacks(new MyPointCharacteristicCallbacks());
  pCharacteristic_SummedPoints_Team1->setCallbacks(new MyPointCharacteristicCallbacks());
  pCharacteristic_SummedPoints_Team2->setCallbacks(new MyPointCharacteristicCallbacks());

  pCharacteristic_Points_Team1->setValue((uint8_t *)&team1_points, 1);
  pCharacteristic_Points_Team2->setValue((uint8_t *)&team2_points, 1);
  pCharacteristic_SummedPoints_Team1->setValue((uint8_t *)&team1_summedPoints, 1);
  pCharacteristic_SummedPoints_Team2->setValue((uint8_t *)&team2_summedPoints, 1);

  // Start the service
  // pService->start();
  pServiceGame->start();

  // Start advertising
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->addServiceUUID(SERVICE_UUID_Game);
  pAdvertising->setScanResponse(false);
  pAdvertising->setMinPreferred(0x0); // set value to 0x00 to not advertise this parameter
  BLEDevice::startAdvertising();

  Serial.println("Waiting a client connection to notify...");

  // Serial.begin(115200);
  // Serial.println("created by 04M04");
  // Serial.println("version: V1.0.1");
}

void btn_loop()
{
  //Team 1 points--------------------------------------------------
  if (last_btnPressedState == BTN_RESET_TEAM1_POINTS_PIN) {
    team1_points = 0;
  }
  if (last_btnPressedState == BTN_ADD_TEAM1_POINTS_PIN) {
    if (team1_points < 99){
      team1_points++;
    }
  }
  if (last_btnPressedState == BTN_SUB_TEAM1_POINTS_PIN) {
    if (team1_points > 0){
      team1_points--;
    }
  }
  //Team 2 points--------------------------------------------------
  if (last_btnPressedState == BTN_RESET_TEAM2_POINTS_PIN) {
    team2_points = 0;
  }
  if (last_btnPressedState == BTN_ADD_TEAM2_POINTS_PIN) {
    if (team2_points < 99){
      team2_points++;
    }
  }
  if (last_btnPressedState == BTN_SUB_TEAM2_POINTS_PIN) {
    if (team2_points > 0){
      team2_points--;
    }
  }
  //Team 1 plays--------------------------------------------------
  if (last_btnPressedState == BTN_RESET_TEAM1_PLAYS_PIN) {
    team1_summedPoints = 0;
  }
  if (last_btnPressedState == BTN_ADD_TEAM1_PLAYS_PIN) {
    if (team1_summedPoints < 99){
      team1_summedPoints++;
    }
  }
  if (last_btnPressedState == BTN_SUB_TEAM1_PLAYS_PIN) {
    if (team1_summedPoints > 0){
      team1_summedPoints--;
    }
  }
  //Team 2 plays--------------------------------------------------
  if (last_btnPressedState == BTN_RESET_TEAM2_PLAYS_PIN) {
    team2_summedPoints = 0;
  }
  if (last_btnPressedState == BTN_ADD_TEAM2_PLAYS_PIN) {
    if (team2_summedPoints < 99){
      team2_summedPoints++;
    }
  }
  if (last_btnPressedState == BTN_SUB_TEAM2_PLAYS_PIN) {
    if (team2_summedPoints > 0){
      team2_summedPoints--;
    }
  }

  last_btnPressedState = 0;
}

// void ble_loop()
// {
//   // notify changed value
//   if (deviceConnected)
//   {
//     // pCharacteristic->setValue((uint8_t *)&value, 4);
//     // pCharacteristic->notify();
//     // value++;
//    
//     delay(10); // bluetooth stack will go into congestion, if too many packets are sent, in 6 hours test i was able to go as low as 3ms
//   }
//   // disconnecting
//   if (!deviceConnected && oldDeviceConnected)
//   {
//     delay(500);                  // give the bluetooth stack the chance to get things ready
//     pServer->startAdvertising(); // restart advertising
//     Serial.println("start advertising");
//     oldDeviceConnected = deviceConnected;
//   }
//   // connecting
//   if (deviceConnected && !oldDeviceConnected)
//   {
//     // do stuff here on connecting
//     oldDeviceConnected = deviceConnected;
//   }
// }

void pointsSerialOut_loop()
{
  Serial.println();
  Serial.println("team1_points:");
  Serial.println(team1_points);
  Serial.println("team2_points:");
  Serial.println(team2_points);
  Serial.println("team1_summedPoints:");
  Serial.println(team1_summedPoints);
  Serial.println("team2_summedPoints:");
  Serial.println(team2_summedPoints);
}

/*--------------------------------------------------------------------------------------
  loop
  Arduino architecture main loop
--------------------------------------------------------------------------------------*/
void loop(void)
{
  // ble_loop();
  drawCount(team1_points, team2_points, team1_summedPoints, team2_summedPoints);
  pointsSerialOut_loop();
}
